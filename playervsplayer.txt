#include <stdio.h>
char board[8][8];


int start(){
    int type;
    printf("Hey, nice to see you!\nDo you wanna play chess against my Pc algorithm?\n-->If no, and you wanna play against player type: (1)\n-->If yes type: (2)\n-->");
    while (1) {
        scanf("%d", &type);
        if (type == 1 || type == 2) {
            return type;
        }
    }
}

void clear(char b[8][8]){
    int i, j;
    for (i = 0;  i<8 ; i++) {
        for (j = 0;  j<8 ; j++) {
            b[i][j]=' ';
        }
    }
}

void write(char b[8][8]){
    int i, j;
    printf("\n Plansza:\n");
    printf("*************************************\n");
    printf("*\\\\ 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 //*\n");
    printf("*\\\\-------------------------------//*\n");
    for (i = 0;  i<8 ; i++) {
        printf("*%d|", i);
        for (j = 0;  j<8 ; j++) {
            printf(" %c ", b[i][j]);
            if (j<7){
                printf(",");
            }
        }
        printf("|%d*", i);
        printf("\n");
    }
    printf("*//-------------------------------\\\\*\n");
    printf("*// 0 , 1 , 2 , 3 , 4 , 5 , 6 , 7 \\\\*\n");
    printf("*************************************\n");
}

void beforeMoves(char b[8][8]){
    int j;
    for (j = 0; j < 8; j++) {
        b[1][j] = 'P';
        b[6][j]='1';
    }
    b[0][0]='W'; b[0][7]='W'; b[0][1]='S'; b[0][6]='S'; b[0][2]='G'; b[0][5]='G'; b[0][3]='H'; b[0][4]='K';
    b[7][0]='5'; b[7][7]='5'; b[7][1]='4'; b[7][6]='4'; b[7][2]='3'; b[7][5]='3'; b[7][3]='9'; b[7][4]='0';
    //WSGHKGSW
    //PPPPPPPP

    //pppppppp
    //wsghkgsw
}

int whiteCorrectMoves(int preMove, char afterMove, int i, int j, int k, int l){
    int temp, temp1;
    if (preMove=='1'){//pawn
        if (i==6){
            if (k==i-2 && l==j && afterMove==' ' || k==i-1 && j==l && afterMove==' '){
                return 1;
            }
        }
        if (i<=3){
            if (k==i-1 && l==j-1 && board[i][j-1]=='P'){
                board[i][j-1]=' ';
                return 1;
            }
            if (k==i-1 && l==j+1 && board[i][j+1]=='P'){
                board[i][j+1]=' ';
                return 1;
            }
            if (k==i-1 && l==j && afterMove==' '){
                return 1;
            }
            if (k==i-1 && l==j-1 && afterMove!=' ' || k==i-1 && l==j+1 && afterMove!=' '){
                return 1;
            }
        }
        else {
            if (k==i-1 && l==j && afterMove==' '){
                return 1;
            }
            if (k==i-1 && l==j-1 && afterMove!=' ' || k==i-1 && l==j+1 && afterMove!=' '){
                return 1;
            }
        }
    }
    if (preMove=='5'){//rook
        if (i>k && j==l){
            temp=i-1;
            while (1){
                if (temp==k){
                    return 1;
                }
                if (board[temp][j]!=' '){
                    return 0;
                }
                temp=temp-1;
            }
        }
        if (i<k && j==l){
            temp=i+1;
            while (1){
                if (temp==k){
                    return 1;
                }
                if (board[temp][j]!=' '){
                    return 0;
                }
                temp=temp+1;
            }
        }
        if (i==k){
            if (j>l){
                temp=j-1;
                while (1){
                    if (temp==l){
                        return 1;
                    }
                    if (board[i][temp]!=' '){
                        return 0;
                    }
                    temp=temp-1;
                }
            }
            if (j<l){
                temp=j+1;
                while (1){
                    if (temp==l){
                        return 1;
                    }
                    if (board[i][temp]!=' '){
                        return 0;
                    }
                    temp=temp+1;
                }
            }
        }
    }
    if (preMove=='4'){//knight
        if (i-1==k && j+2==l){
            return 1;
        }
        if (i+1==k && j+2==l){
            return 1;
        }
        if (i+2==k && j+1==l){
            return 1;
        }
        if (i+2==k && j-1==l){
            return 1;
        }
        if (i+1==k && j-2==l){
            return 1;
        }
        if (i-1==k && j-2==l){
            return 1;
        }
        if (i-2==k && j-1==l){
            return 1;
        }
        if (i-2==k && j+1==l){
            return 1;
        }
    }
    if (preMove=='3'){//bishop
        if (i>k && j<l){
            for (temp=i-1, temp1=j+1; ; temp--, temp1++) {
                    if (temp1==l && temp==k){
                        return 1;
                    }
                    if (board[temp][temp1]!=' '){
                        return 0;
                    }
            }
        }
        if (i<k && j<l){
            for (temp=i+1, temp1=j+1; ; temp++, temp1++) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i<k && j>l){
            for (temp=i+1, temp1=j-1; ; temp++, temp1--) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i>k && j>l){
            for (temp=i-1, temp1=j-1; ; temp--, temp1--) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
    }
    if (preMove=='9'){//queen
        if (i>k && j==l){
            temp=i-1;
            while (1){
                if (temp==k){
                    return 1;
                }
                if (board[temp][j]!=' '){
                    return 0;
                }
                temp=temp-1;
            }
        }
        if (i<k && j==l){
            temp=i+1;
            while (1){
                if (temp==k){
                    return 1;
                }
                if (board[temp][j]!=' '){
                    return 0;
                }
                temp=temp+1;
            }
        }
        if (i==k){
            if (j>l){
                temp=j-1;
                while (1){
                    if (temp==l){
                        return 1;
                    }
                    if (board[i][temp]!=' '){
                        return 0;
                    }
                    temp=temp-1;
                }
            }
            if (j<l){
                temp=j+1;
                while (1){
                    if (temp==l){
                        return 1;
                    }
                    if (board[i][temp]!=' '){
                        return 0;
                    }
                    temp=temp+1;
                }
            }
        }
        if (i>k && j<l){
            for (temp=i-1, temp1=j+1; ; temp--, temp1++) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i<k && j<l){
            for (temp=i+1, temp1=j+1; ; temp++, temp1++) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i<k && j>l){
            for (temp=i+1, temp1=j-1; ; temp++, temp1--) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i>k && j>l){
            for (temp=i-1, temp1=j-1; ; temp--, temp1--) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
    }
    if (preMove=='0'){//king
        if (i==k && j+1==l){
            return 1;
        }
        if (i+1==k && j+1==l){
            return 1;
        }
        if (i+1==k && j==l){
            return 1;
        }
        if (i+1==k && j-1==l){
            return 1;
        }
        if (i==k && j-1==l){
            return 1;
        }
        if (i-1==k && j-1==l){
            return 1;
        }
        if (i-1==k && j==l){
            return 1;
        }
        if (i-1==k && j+1==l){
            return 1;
        }
    }
    return 0;
}

int blackCorrectMoves(char preMove, int afterMove, int i, int j, int k, int l){
    int temp, temp1;
    if (preMove=='P'){//pawn
        if (i==1){
            if (k==i+2 && l==j && afterMove==' ' || k==i+1 && j==l && afterMove==' '){
                return 1;
            }
        }
        if (i>=4){
            if (k==i+1 && l==j-1 && board[i][j-1]=='1'){
                board[i][j-1]=' ';
                return 1;
            }
            if (k==i+1 && l==j+1 && board[i][j+1]=='1'){
                board[i][j+1]=' ';
                return 1;
            }
            if (k==i+1 && l==j && afterMove==' '){
                return 1;
            }
            if (k==i+1 && l==j-1 && afterMove!=' ' || k==i+1 && l==j+1 && afterMove!=' '){
                return 1;
            }
        }
        else {
            if (k==i+1 && l==j && afterMove==' '){
                return 1;
            }
            if (k==i+1 && l==j-1 && afterMove!=' ' || k==i+1 && l==j+1 && afterMove!=' '){
                return 1;
            }
        }
    }
    if (preMove=='W'){//rook
        if (i>k && j==l){
            temp=i-1;
            while (1){
                if (temp==k){
                    return 1;
                }
                if (board[temp][j]!=' '){
                    return 0;
                }
                temp=temp-1;
            }
        }
        if (i<k && j==l){
            temp=i+1;
            while (1){
                if (temp==k){
                    return 1;
                }
                if (board[temp][j]!=' '){
                    return 0;
                }
                temp=temp+1;
            }
        }
        if (i==k){
            if (j>l){
                temp=j-1;
                while (1){
                    if (temp==l){
                        return 1;
                    }
                    if (board[i][temp]!=' '){
                        return 0;
                    }
                    temp=temp-1;
                }
            }
            if (j<l){
                temp=j+1;
                while (1){
                    if (temp==l){
                        return 1;
                    }
                    if (board[i][temp]!=' '){
                        return 0;
                    }
                    temp=temp+1;
                }
            }
        }
    }
    if (preMove=='S'){//knight
        if (i-1==k && j+2==l){
            return 1;
        }
        if (i+1==k && j+2==l){
            return 1;
        }
        if (i+2==k && j+1==l){
            return 1;
        }
        if (i+2==k && j-1==l){
            return 1;
        }
        if (i+1==k && j-2==l){
            return 1;
        }
        if (i-1==k && j-2==l){
            return 1;
        }
        if (i-2==k && j-1==l){
            return 1;
        }
        if (i-2==k && j+1==l){
            return 1;
        }
    }
    if (preMove=='G'){//bishop
        if (i>k && j<l){
            for (temp=i-1, temp1=j+1; ; temp--, temp1++) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i<k && j<l){
            for (temp=i+1, temp1=j+1; ; temp++, temp1++) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i<k && j>l){
            for (temp=i+1, temp1=j-1; ; temp++, temp1--) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i>k && j>l){
            for (temp=i-1, temp1=j-1; ; temp--, temp1--) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
    }
    if (preMove=='H'){//queen
        if (i>k && j==l){
            temp=i-1;
            while (1){
                if (temp==k){
                    return 1;
                }
                if (board[temp][j]!=' '){
                    return 0;
                }
                temp=temp-1;
            }
        }
        if (i<k && j==l){
            temp=i+1;
            while (1){
                if (temp==k){
                    return 1;
                }
                if (board[temp][j]!=' '){
                    return 0;
                }
                temp=temp+1;
            }
        }
        if (i==k){
            if (j>l){
                temp=j-1;
                while (1){
                    if (temp==l){
                        return 1;
                    }
                    if (board[i][temp]!=' '){
                        return 0;
                    }
                    temp=temp-1;
                }
            }
            if (j<l){
                temp=j+1;
                while (1){
                    if (temp==l){
                        return 1;
                    }
                    if (board[i][temp]!=' '){
                        return 0;
                    }
                    temp=temp+1;
                }
            }
        }
        if (i>k && j<l){
            for (temp=i-1, temp1=j+1; ; temp--, temp1++) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i<k && j<l){
            for (temp=i+1, temp1=j+1; ; temp++, temp1++) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i<k && j>l){
            for (temp=i+1, temp1=j-1; ; temp++, temp1--) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
        if (i>k && j>l){
            for (temp=i-1, temp1=j-1; ; temp--, temp1--) {
                if (temp1==l && temp==k){
                    return 1;
                }
                if (board[temp][temp1]!=' '){
                    return 0;
                }
            }
        }
    }
    if (preMove=='K'){//king
        if (i==k && j+1==l){
            return 1;
        }
        if (i+1==k && j+1==l){
            return 1;
        }
        if (i+1==k && j==l){
            return 1;
        }
        if (i+1==k && j-1==l){
            return 1;
        }
        if (i==k && j-1==l){
            return 1;
        }
        if (i-1==k && j-1==l){
            return 1;
        }
        if (i-1==k && j==l){
            return 1;
        }
        if (i-1==k && j+1==l){
            return 1;
        }
    }
    return 0;
}

int checkTheCheckOnWhite(int preMove, char afterMove, int i, int j, int k, int l){
    char tempBoard[8][8];
    int x, y, z, c, x1, y1, x2, y2, count;      // x, y and z, c are used in almost every "for"
    for (x = 0; x < 8; x++) {                   // x1 and y1 are used to remember where is the white king
        for (y = 0; y < 8; y++) {               //x2 and y2 are used to remember where piece is
            tempBoard[x][y]=board[x][y];
        }
    }
    tempBoard[i][j]=' ';
    tempBoard[k][l]=preMove;
    for (x = 0; x < 8; x++) {
        for (y = 0; y < 8; y++) {
            if (tempBoard[x][y]=='0'){
                x1=x;
                y1=y;
            }
        }
    }
    //pawn check
    if (tempBoard[x1-1][y1-1]=='P' || tempBoard[x1-1][y1+1]=='P'){
        return 1;
    }
    //rock check
    for (x = 0; x < 8; x++) {
        if (tempBoard[x][y1]=='W'){
            count=0;
            x2=x;
            if (x1>x2){
                for (z=x2+1; z<x1; z++) {
                    if (tempBoard[z][y1]==' '){
                        count++;
                    }
                    if (count==x1-x2-1){
                        return 1;
                    }
                }
                if (x1-1==x2){
                    return 1;
                }
            }
            if (x1<x2){
                for (z=x1+1; z<x2; z++) {
                    if (tempBoard[z][y1]==' '){
                        count++;
                    }
                    if (count==x2-x1-1){
                        return 1;
                    }
                }
                if (x1+1==x2){
                    return 1;
                }
            }
        }
        if (tempBoard[x1][x]=='W'){
            count=0;
            y2=x;
            if (y1>y2){
                for (c=y2+1; c<y1; c++) {
                    if (tempBoard[x1][c]==' '){
                        count++;
                    }
                    if (count==y1-y2-1){
                        return 1;
                    }
                }
                if (y1-1==y2){
                    return 1;
                }
            }
            if (y1<y2){
                for (c=y1+1; c<y2; c++) {
                    if (tempBoard[x1][c]==' '){
                        count++;
                    }
                    if (count==y2-y1-1){
                        return 1;
                    }
                }
                if (y1+1==y2){
                    return 1;
                }
            }
        }
    }
    //knight check
    if (tempBoard[x1+2][y1+1]=='S'){
        return 1;
    }
    if (tempBoard[x1+2][y1-1]=='S'){
        return 1;
    }
    if (tempBoard[x1+1][y1-2]=='S'){
        return 1;
    }
    if (tempBoard[x1-1][y1-2]=='S'){
        return 1;
    }
    if (tempBoard[x1-2][y1-1]=='S'){
        return 1;
    }
    if (tempBoard[x1-2][y1+1]=='S'){
        return 1;
    }
    if (tempBoard[x1-1][y1+2]=='S'){
        return 1;
    }
    if (tempBoard[x1+1][y1+2]=='S'){
        return 1;
    }
    //bishop check
    for (x=0; x<8; x++) {
        for (y=0; y<8; y++) {
            if (tempBoard[x][y]=='G'){
                count=0;
                x2=x;
                y2=y;
                if (x1>x2 && y1<y2) {
                    if (x1-x2==y2-y1) {
                        for (z=0; z<y2-y1-1; z++) {
                            if (tempBoard[x1-1-z][y1+1+z]==' '){
                                count++;
                            }
                            if (count==y2-y1-1){
                                return 1;
                            }
                            if (x2+1==x1 && y1+1==y2){
                                return 1;
                            }
                        }
                    }
                }
                if (x1<x2 && y1<y2) {
                    if (x2-x1==y2-y1) {
                        for (z=0; z<y2-y1-1; z++) {
                            if (tempBoard[x1+1+z][y1+1+z]==' '){
                                count++;
                            }
                            if (count==y2-y1-1){
                                return 1;
                            }
                            if (x1+1==x2 && y1+1==y2){
                                return 1;
                            }
                        }
                    }
                }
                if (x1<x2 && y1>y2) {
                    if (x2-x1==y1-y2) {
                        for (z=0; z<y1-y2-1; z++) {
                            if (tempBoard[x1+1+z][y1-1-z]==' '){
                                count++;
                            }
                            if (count==y1-y2-1){
                                return 1;
                            }
                            if (x1+1==x2 && y2+1==y1){
                                return 1;
                            }
                        }
                    }
                }
                if (x1>x2 && y1>y2) {
                    if (x1-x2==y1-y2) {
                        for (z=0; z<y1-y2-1; z++) {
                            if (tempBoard[x1-1-z][y1-1-z]==' '){
                                count++;
                            }
                            if (count==y1-y2-1){
                                return 1;
                            }
                            if (x2+1==x1 && y2+1==y1){
                                return 1;
                            }
                        }
                    }
                }
            }
        }
    }
    //Queen check
    for (x = 0; x < 8; x++) {
        if (tempBoard[x][y1]=='H'){
            count=0;
            x2=x;
            if (x1>x2){
                for (z=x2+1; z<x1; z++) {
                    if (tempBoard[z][y1]==' '){
                        count++;
                    }
                    if (count==x1-x2-1){
                        return 1;
                    }
                }
                if (x1-1==x2){
                    return 1;
                }
            }
            if (x1<x2){
                for (z=x1+1; z<x2; z++) {
                    if (tempBoard[z][y1]==' '){
                        count++;
                    }
                    if (count==x2-x1-1){
                        return 1;
                    }
                }
                if (x1+1==x2){
                    return 1;
                }
            }
        }
        if (tempBoard[x1][x]=='H'){
            count=0;
            y2=x;
            if (y1>y2){
                for (c=y2+1; c<y1; c++) {
                    if (tempBoard[x1][c]==' '){
                        count++;
                    }
                    if (count==y1-y2-1){
                        return 1;
                    }
                }
                if (y1-1==y2){
                    return 1;
                }
            }
            if (y1<y2){
                for (c=y1+1; c<y2; c++) {
                    if (tempBoard[x1][c]==' '){
                        count++;
                    }
                    if (count==y2-y1-1){
                        return 1;
                    }
                }
                if (y1+1==y2){
                    return 1;
                }
            }
        }
    }
    for (x=0; x<8; x++) {
        for (y=0; y<8; y++) {
            if (tempBoard[x][y]=='H'){
                count=0;
                x2=x;
                y2=y;
                if (x1>x2 && y1<y2) {
                    if (x1-x2==y2-y1) {
                        for (z=0; z<y2-y1-1; z++) {
                            if (tempBoard[x1-1-z][y1+1+z]==' '){
                                count++;
                            }
                            if (count==y2-y1-1){
                                return 1;
                            }
                            if (x2+1==x1 && y1+1==y2){
                                return 1;
                            }
                        }
                    }
                }
                if (x1<x2 && y1<y2) {
                    if (x2-x1==y2-y1) {
                        for (z=0; z<y2-y1-1; z++) {
                            if (tempBoard[x1+1+z][y1+1+z]==' '){
                                count++;
                            }
                            if (count==y2-y1-1){
                                return 1;
                            }
                            if (x1+1==x2 && y1+1==y2){
                                return 1;
                            }
                        }
                    }
                }
                if (x1<x2 && y1>y2) {
                    if (x2-x1==y1-y2) {
                        for (z=0; z<y1-y2-1; z++) {
                            if (tempBoard[x1+1+z][y1-1-z]==' '){
                                count++;
                            }
                            if (count==y1-y2-1){
                                return 1;
                            }
                            if (x1+1==x2 && y2+1==y1){
                                return 1;
                            }
                        }
                    }
                }
                if (x1>x2 && y1>y2) {
                    if (x1-x2==y1-y2) {
                        for (z=0; z<y1-y2-1; z++) {
                            if (tempBoard[x1-1-z][y1-1-z]==' '){
                                count++;
                            }
                            if (count==y1-y2-1){
                                return 1;
                            }
                            if (x2+1==x1 && y2+1==y1){
                                return 1;
                            }
                        }
                    }
                }
            }
        }
    }
    //King check
    for (x=0; x<8; x++) {
        for (y=0; y<8; y++) {
            if (tempBoard[x][y]=='K'){
                x2=x;
                y2=y;
                if (x1==x2 && y1+1==y2){
                    return 1;
                }
                if (x1+1==x2 && y1+1==y2){
                    return 1;
                }
                if (x1+1==x2 && y1==y2){
                    return 1;
                }
                if (x1+1==x2 && y1-1==y2){
                    return 1;
                }
                if (x1==x2 && y1-1==y2){
                    return 1;
                }
                if (x1-1==x2 && y1-1==y2){
                    return 1;
                }
                if (x1-1==x2 && y1==y2){
                    return 1;
                }
                if (x1-1==x2 && y1+1==y2){
                    return 1;
                }
            }
        }
    }
    return 0;
}

int checkTheCheckOnBlack(char preMove, int afterMove, int i, int j, int k, int l){
    char tempBoard[8][8];
    int x, y, z, c, x1, y1, x2, y2, count;
    for (x = 0; x < 8; x++) {
        for (y = 0; y < 8; y++) {
            tempBoard[x][y]=board[x][y];
        }
    }
    tempBoard[i][j]=' ';
    tempBoard[k][l]=preMove;
    for (x = 0; x < 8; x++) {
        for (y = 0; y < 8; y++) {
            if (tempBoard[x][y]=='K'){
                x1=x;
                y1=y;
            }
        }
    }
    //pawn check
    if (tempBoard[x1-1][y1-1]=='1' || tempBoard[x1-1][y1+1]=='1'){
        return 1;
    }
    //rock check
    for (x = 0; x < 8; x++) {
        if (tempBoard[x][y1]=='5'){
            count=0;
            x2=x;
            if (x1>x2){
                for (z=x2+1; z<x1; z++) {
                    if (tempBoard[z][y1]==' '){
                        count++;
                    }
                    if (count==x1-x2-1){
                        return 1;
                    }
                }
                if (x1-1==x2){
                    return 1;
                }
            }
            if (x1<x2){
                for (z=x1+1; z<x2; z++) {
                    if (tempBoard[z][y1]==' '){
                        count++;
                    }
                    if (count==x2-x1-1){
                        return 1;
                    }
                }
                if (x1+1==x2){
                    return 1;
                }
            }
        }
        if (tempBoard[x1][x]=='5'){
            count=0;
            y2=x;
            if (y1>y2){
                for (c=y2+1; c<y1; c++) {
                    if (tempBoard[x1][c]==' '){
                        count++;
                    }
                    if (count==y1-y2-1){
                        return 1;
                    }
                }
                if (y1-1==y2){
                    return 1;
                }
            }
            if (y1<y2){
                for (c=y1+1; c<y2; c++) {
                    if (tempBoard[x1][c]==' '){
                        count++;
                    }
                    if (count==y2-y1-1){
                        return 1;
                    }
                }
                if (y1+1==y2){
                    return 1;
                }
            }
        }
    }
    //knight check
    if (tempBoard[x1+2][y1+1]=='4'){
        return 1;
    }
    if (tempBoard[x1+2][y1-1]=='4'){
        return 1;
    }
    if (tempBoard[x1+1][y1-2]=='4'){
        return 1;
    }
    if (tempBoard[x1-1][y1-2]=='4'){
        return 1;
    }
    if (tempBoard[x1-2][y1-1]=='4'){
        return 1;
    }
    if (tempBoard[x1-2][y1+1]=='4'){
        return 1;
    }
    if (tempBoard[x1-1][y1+2]=='4'){
        return 1;
    }
    if (tempBoard[x1+1][y1+2]=='4'){
        return 1;
    }
    //bishop check
    for (x=0; x<8; x++) {
        for (y=0; y<8; y++) {
            if (tempBoard[x][y]=='3'){
                count=0;
                x2=x;
                y2=y;
                if (x1>x2 && y1<y2) {
                    if (x1-x2==y2-y1) {
                        for (z=0; z<y2-y1-1; z++) {
                            if (tempBoard[x1-1-z][y1+1+z]==' '){
                                count++;
                            }
                            if (count==y2-y1-1){
                                return 1;
                            }
                            if (x2+1==x1 && y1+1==y2){
                                return 1;
                            }
                        }
                    }
                }
                if (x1<x2 && y1<y2) {
                    if (x2-x1==y2-y1) {
                        for (z=0; z<y2-y1-1; z++) {
                            if (tempBoard[x1+1+z][y1+1+z]==' '){
                                count++;
                            }
                            if (count==y2-y1-1){
                                return 1;
                            }
                            if (x1+1==x2 && y1+1==y2){
                                return 1;
                            }
                        }
                    }
                }
                if (x1<x2 && y1>y2) {
                    if (x2-x1==y1-y2) {
                        for (z=0; z<y1-y2-1; z++) {
                            if (tempBoard[x1+1+z][y1-1-z]==' '){
                                count++;
                            }
                            if (count==y1-y2-1){
                                return 1;
                            }
                            if (x1+1==x2 && y2+1==y1){
                                return 1;
                            }
                        }
                    }
                }
                if (x1>x2 && y1>y2) {
                    if (x1-x2==y1-y2) {
                        for (z=0; z<y1-y2-1; z++) {
                            if (tempBoard[x1-1-z][y1-1-z]==' '){
                                count++;
                            }
                            if (count==y1-y2-1){
                                return 1;
                            }
                            if (x2+1==x1 && y2+1==y1){
                                return 1;
                            }
                        }
                    }
                }
            }
        }
    }
    //Queen check
    for (x = 0; x < 8; x++) {
        if (tempBoard[x][y1]=='9'){
            count=0;
            x2=x;
            if (x1>x2){
                for (z=x2+1; z<x1; z++) {
                    if (tempBoard[z][y1]==' '){
                        count++;
                    }
                    if (count==x1-x2-1){
                        return 1;
                    }
                }
                if (x1-1==x2){
                    return 1;
                }
            }
            if (x1<x2){
                for (z=x1+1; z<x2; z++) {
                    if (tempBoard[z][y1]==' '){
                        count++;
                    }
                    if (count==x2-x1-1){
                        return 1;
                    }
                }
                if (x1+1==x2){
                    return 1;
                }
            }
        }
        if (tempBoard[x1][x]=='9'){
            count=0;
            y2=x;
            if (y1>y2){
                for (c=y2+1; c<y1; c++) {
                    if (tempBoard[x1][c]==' '){
                        count++;
                    }
                    if (count==y1-y2-1){
                        return 1;
                    }
                }
                if (y1-1==y2){
                    return 1;
                }
            }
            if (y1<y2){
                for (c=y1+1; c<y2; c++) {
                    if (tempBoard[x1][c]==' '){
                        count++;
                    }
                    if (count==y2-y1-1){
                        return 1;
                    }
                }
                if (y1+1==y2){
                    return 1;
                }
            }
        }
    }
    for (x=0; x<8; x++) {
        for (y=0; y<8; y++) {
            if (tempBoard[x][y]=='9'){
                count=0;
                x2=x;
                y2=y;
                if (x1>x2 && y1<y2) {
                    if (x1-x2==y2-y1) {
                        for (z=0; z<y2-y1-1; z++) {
                            if (tempBoard[x1-1-z][y1+1+z]==' '){
                                count++;
                            }
                            if (count==y2-y1-1){
                                return 1;
                            }
                            if (x2+1==x1 && y1+1==y2){
                                return 1;
                            }
                        }
                    }
                }
                if (x1<x2 && y1<y2) {
                    if (x2-x1==y2-y1) {
                        for (z=0; z<y2-y1-1; z++) {
                            if (tempBoard[x1+1+z][y1+1+z]==' '){
                                count++;
                            }
                            if (count==y2-y1-1){
                                return 1;
                            }
                            if (x1+1==x2 && y1+1==y2){
                                return 1;
                            }
                        }
                    }
                }
                if (x1<x2 && y1>y2) {
                    if (x2-x1==y1-y2) {
                        for (z=0; z<y1-y2-1; z++) {
                            if (tempBoard[x1+1+z][y1-1-z]==' '){
                                count++;
                            }
                            if (count==y1-y2-1){
                                return 1;
                            }
                            if (x1+1==x2 && y2+1==y1){
                                return 1;
                            }
                        }
                    }
                }
                if (x1>x2 && y1>y2) {
                    if (x1-x2==y1-y2) {
                        for (z=0; z<y1-y2-1; z++) {
                            if (tempBoard[x1-1-z][y1-1-z]==' '){
                                count++;
                            }
                            if (count==y1-y2-1){
                                return 1;
                            }
                            if (x2+1==x1 && y2+1==y1){
                                return 1;
                            }
                        }
                    }
                }
            }
        }
    }
    //King check
    for (x=0; x<8; x++) {
        for (y=0; y<8; y++) {
            if (tempBoard[x][y]=='0'){
                x2=x;
                y2=y;
                if (x1==x2 && y1+1==y2){
                    return 1;
                }
                if (x1+1==x2 && y1+1==y2){
                    return 1;
                }
                if (x1+1==x2 && y1==y2){
                    return 1;
                }
                if (x1+1==x2 && y1-1==y2){
                    return 1;
                }
                if (x1==x2 && y1-1==y2){
                    return 1;
                }
                if (x1-1==x2 && y1-1==y2){
                    return 1;
                }
                if (x1-1==x2 && y1==y2){
                    return 1;
                }
                if (x1-1==x2 && y1+1==y2){
                    return 1;
                }
            }
        }
    }
    return 0;
}

void blackMove(char b[8][8]){
    int i, j, k, l, afterMove;
    char preMove;
    printf("Black move!\n");
    while (1) {
        printf("Type square from which u wanna make a move:");
        scanf("%d %d", &i, &j);
        if (b[i][j] == 'P' || b[i][j] == 'W' || b[i][j] == 'S' || b[i][j] == 'G' || b[i][j] == 'H' || b[i][j] == 'P') {
            preMove = b[i][j];
            printf("Type square to which u wanna make a move:");
            scanf("%d %d", &k, &l);
            if (b[k][l] == '1' || b[k][l] == '5' || b[k][l] == '4' || b[k][l] == '3' || b[k][l] == '9' || b[k][l]==' ') {
                afterMove = b[k][l];
                if (blackCorrectMoves(preMove, afterMove, i, j, k, l)==1 && checkTheCheckOnBlack(preMove, afterMove, i, j, k, l)==0) {
                    b[k][l] = preMove;
                    break;
                }
                else {
                    printf("BAD MOVE!\n");
                }
            }
            else {
                printf("BAD MOVE!\n");
            }
        }
        else {
            printf("BAD MOVE!\n");
        }
    }
    board[i][j]=' ';
    write(board);
}

void whiteMove(char b[8][8]){
    int i, j, k, l, preMove;
    char afterMove;
    printf("White move!\n");
    while (1) {
        printf("Type square from which u wanna make a move:");
        scanf("%d %d", &i, &j);
        if (b[i][j]=='1' || b[i][j]=='5' || b[i][j]=='4' || b[i][j]=='3' || b[i][j]=='9' || b[i][j]=='0') {
            preMove = b[i][j];
            printf("Type square to which u wanna make a move:");
            scanf("%d %d", &k, &l);
            if (b[k][l] == ' ' || b[k][l] == 'W' || b[k][l] == 'S' || b[k][l] == 'G' || b[k][l] == 'H' || b[k][l] == 'P'){
                afterMove = b[k][l];
                if (whiteCorrectMoves(preMove, afterMove, i, j, k, l)==1 && checkTheCheckOnWhite(preMove, afterMove, i, j, k, l)==0) {
                    b[k][l] = preMove;
                    break;
                }
                else {
                    printf("BAD MOVE!\n");
                }
            }
            else {
                printf("BAD MOVE!\n");
            }
        }
        else {
            printf("BAD MOVE!\n");
        }
    }
    board[i][j]=' ';
    write(board);
}

int main() {
    int type=0;
    type=start();
    if (type==1) {
        clear(board);
        write(board);
        beforeMoves(board);
        write(board);
        while (1) {
            whiteMove(board);
            blackMove(board);
        }
    }
    if (type==2){
        printf("not ready yet");
    }
    else return 0;
}
